// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole{
    STUDENT
    TEACHER
    ADMIN
}

model Profile {
  id            Int         @id @default(autoincrement())
  group         Group?      @relation(fields: [groupId], references: [id])
  groupId       Int?
  faculty       Faculty?    @relation(fields: [facultyId], references: [id])
  facultyId     Int?
  university    University  @relation(fields: [universityId], references: [id])
  universityId  Int
  first_name    String
  last_name     String
  email         String
  createdAt     DateTime    @default(now()) @db.Timestamp(6)
  imageUrl      String
  user          User?
  updatedAt     DateTime    @updatedAt @default(now())
}

model User {
  id                Int             @id @default(autoincrement())
  ticket            String          @unique
  password          String
  createdAt         DateTime        @default(now()) @db.Timestamp(6)
  updatedAt         DateTime        @updatedAt @default(now())
  profile           Profile         @relation(fields: [profileId], references: [id])
  profileId         Int             @unique
  posts             Post[]
  participateEvents UserOnEvent[]
  organizedEvents   Event[]
  likes             LikeOnPosts[]
  comments          Comment[]
  likedComments     LikeOnComments[]
  notifications     Notification[]
  token             String?
  chats             Chat[]
  messages          Message[]
  readMessages      UserReadMessage[]
  rolesInChat       RoleOnChat[]
  role              UserRole        @default(STUDENT)
}

model Post {
  id            Int             @id @default(autoincrement())
  authorId      Int
  title         String
  chunks        PostChunk[]
  createdAt     DateTime        @default(now()) @db.Timestamp(6)
  user          User            @relation(fields: [authorId], references: [id])
  tags          PostsOnTags[]
  likes         LikeOnPosts[]
  comments      Comment[]
  deleted       DateTime?
  updatedAt     DateTime        @updatedAt @default(now())
  attachments   Attachment[]
}

model Attachment{
    id          Int     @id @default(autoincrement())
    postId      Int
    post        Post    @relation(fields: [postId], references: [id])
    url         String
    filename    String? @default("")
    extension   String? @default("")
}

model LikeOnComments{
  userId    Int
  commentId Int
  comment   Comment? @relation(fields: [commentId], references: [id])
  user      User?    @relation(fields: [userId], references: [id])

  @@id([userId, commentId])
}

model LikeOnPosts{
  userId    Int
  postId    Int
  user      User?    @relation(fields: [userId], references: [id])
  post      Post?    @relation(fields: [postId], references: [id])

  @@id([userId, postId])
}

model PostChunk {
  id        Int      @id @default(autoincrement())
  image     String
  text      String
  postId    Int      @unique
  post      Post     @relation(fields: [postId], references: [id])
  createdAt DateTime @default(now()) @db.Timestamp(6)
  deleted   DateTime?
}

model Tag {
  id        Int           @id @default(autoincrement())
  value     String
  posts     PostsOnTags[]
  createdAt DateTime      @default(now()) @db.Timestamp(6)
  updatedAt         DateTime        @updatedAt @default(now())

}

model Comment {
  id            Int             @id @default(autoincrement())
  text          String
  userId        Int
  createdAt     DateTime        @default(now()) @db.Timestamp(6)
  user          User            @relation(fields: [userId], references: [id])
  postId        Int
  post          Post            @relation(fields: [postId], references: [id])
  users         LikeOnComments[]
  updatedAt         DateTime        @updatedAt @default(now())

}

model PostsOnTags {
  tagId  Int
  postId Int
  post   Post @relation(fields: [postId], references: [id])
  tag    Tag  @relation(fields: [tagId], references: [id])

  @@id([postId, tagId])
}

model Group {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  members   Profile[]
  createdAt DateTime  @default(now()) @db.Timestamp(6)
  updatedAt DateTime  @updatedAt @default(now())
}

model Faculty {
  id           Int        @id @default(autoincrement())
  members      Profile[]
  name         String     @unique
  imageUrl     String     @default("https://google.com")
  createdAt    DateTime   @default(now()) @db.Timestamp(6)
  updatedAt    DateTime   @updatedAt @default(now())
}

model University {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  members   Profile[]
  imageUrl  String    @default("https://google.com")
  createdAt DateTime  @default(now()) @db.Timestamp(6)
}

model UserOnEvent {
  userId  Int
  eventId Int
  event   Event? @relation(fields: [eventId], references: [id])
  user    User?  @relation(fields: [userId], references: [id])

  @@id([userId, eventId])
}

model Event {
  id          Int           @id @default(autoincrement())
  name        String
  date        DateTime      @db.Timestamp(6)
  createdAt   DateTime      @default(now()) @db.Timestamp(6)
  organizer   User          @relation(fields: [organizerId], references: [id])
  organizerId Int
  members     UserOnEvent[]
  status      String
  title       String
  address     String
}

model Notification {
  id          Int           @id @default(autoincrement())
  message     String
  userId      Int
  user        User          @relation(fields: [userId], references: [id])
  read        Boolean       @default(false)
}

model UserReadMessage{
    userId     Int
    user       User? @relation(fields: [userId], references: [id])
    messageId  Int
    message    Message? @relation(fields: [messageId], references: [id])

    @@id([userId, messageId])
}

enum Role{
    USER
    ADMIN
}

model RoleOnChat{
    userId  Int
    user    User?    @relation(fields: [userId], references: [id])
    chatId  Int
    chat    Chat?    @relation(fields: [chatId], references: [id])
    role    Role?    @default(USER)

    @@id([chatId, userId])
}

model Chat{
  id            Int           @id @default(autoincrement())
  title         String
  users         User[]
  last_message  String?
  messages      Message[]
  createdAt   DateTime      @default(now()) @db.Timestamp(6)
  updatedAt     DateTime   @updatedAt @default(now())
  imageUrl      String?
  roles         RoleOnChat[]
}

model Message{
  id          Int           @id @default(autoincrement())
  user        User          @relation(fields: [userId], references: [id])
  userId      Int
  message     String
  image       String?
  createdAt   DateTime      @default(now()) @db.Timestamp(6)
  chatId      Int
  chat        Chat          @relation(fields: [chatId], references: [id])
  updatedAt   DateTime     @updatedAt @default(now())
  readUsers   UserReadMessage[]
}
